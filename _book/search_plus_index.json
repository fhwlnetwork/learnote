{"./":{"url":"./","title":"简介","keywords":"","body":"先写个目录吧 这是码农转运维的心塞路 linux笔记 linux基础命令 Nginx笔记 Tomact笔记 redis笔记 安装 主从配置_哨兵配置 redis集群配置 redis集群扩容收缩 工具管理 k8_docker笔记 安装 ES笔记 安装 交互 操作语言 集群配置 ELK笔记 安装 nginxjson日志采集 nginix正常日志和错误日志 tomcat日志收集 java多行日志收集 收集docker日志 filebet收集ngingx日志 Copyright © wjhlog.com 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-04-29 22:47:00 "},"linux/commond.html":{"url":"linux/commond.html","title":"linux基础命令","keywords":"","body":"linux基础命令 Copyright © wjhlog.com 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-04-20 22:48:44 "},"redis/安装.html":{"url":"redis/安装.html","title":"安装","keywords":"","body":"1、目录规划 ### redis 下载目录 /data/soft/ ### redis 安装目录 /opt/redis_cluster/redis_{PORT}/{conf,logs,pid} ### redis数据目录 /opt/redis_cluster/redis_{PORT}/redis_{port}.rdb ### redis 运维脚本 /root/scripts/redis_shell.sh 2、安装命令 2.1、 安装准备 ###编辑hosts文件 [root@db01 ~]#vim /etc/hosts [root@db01 ~]#tail -3 /etc/hosts 10.0.0.51 db01 10.0.0.52 db02 10.0.0.53 db03 [root@db01 ~]#创建目录 [root@db01 ~]#mkdir -p /data/soft [root@db01 ~]#mkdir -p /opt/redis_cluster/redis_6379 [root@db01 ~]#mkdir -p /opt/redis_cluster/redis_6379/{conf,pid,logs} [root@db01 ~]#mkdir -p /data/redis_cluster/redis_6379 [root@db01 ~]#cd /data/soft/ root@db01 ~]#下载文件 [root@db01 /data/soft]#wget http://download.redis.io/releases/redis-3.2.12.tar.gz [root@db01 /data/soft]#tar zxvf redis-3.2.12.tar.gz -C /opt/redis_cluster/ 2.2、 安装程序 [root@db01 /opt/redis_cluster]#ln -s /opt/redis_cluster/redis-3.2.12/ /opt/redis_cluster/redis [root@db01 /opt/redis_cluster]#ll total 0 lrwxrwxrwx 1 root root 32 Apr 20 13:40 redis -> /opt/redis_cluster/redis-3.2.12/ drwxrwxr-x 6 root root 309 Jun 13 2018 redis-3.2.12 drwxr-xr-x 5 root root 41 Apr 20 13:20 redis_6379 [root@db01 /opt/redis_cluster]#cd redis [root@db01 /opt/redis_cluster/redis]#make && make install 2.3、编辑配置文件 [root@db01 /opt/redis_cluster/redis_6379/conf]#vim /opt/redis_cluster/redis_6379/conf ### 以守护模式启动 daemonize yes ### 绑定的主机地址 bind 10.0.0.51 127.0.0.1 ### 监听接口 port 6379 ### pid文件和log文件的保存地址 pidfile /opt/redis_cluster/redis_6379/pid/redis_6379.pid logfile /opt/redis_cluster/redis_6379/logs/redis_6379.log ### 设置数据库的数量，默认数据库为0 databases 16 ### 指定本地持计划文件的文件名，默认是dump.rdb dbfilename redis_6379.rdb ### 本地数据库的目录 dir /data/redis_cluster/redis_6379 2.3 借助官方工具生成启动配置文件 进入utils，执行install文件，生成 [root@db01 /opt/redis_cluster/redis_6379/conf]#cd [root@db01 ~]#cd /opt/redis_cluster/redis/utils/ [root@db01 /opt/redis_cluster/redis/utils]#./install_server.sh Welcome to the redis service installer This script will help you easily set up a running redis server Please select the redis port for this instance: [6379] Selecting default: 6379 Please select the redis config file name [/etc/redis/6379.conf] Selected default - /etc/redis/6379.conf Please select the redis log file name [/var/log/redis_6379.log] Selected default - /var/log/redis_6379.log Please select the data directory for this instance [/var/lib/redis/6379] Selected default - /var/lib/redis/6379 Please select the redis executable path [/usr/local/bin/redis-server] Selected config: Port : 6379 Config file : /etc/redis/6379.conf Log file : /var/log/redis_6379.log Data dir : /var/lib/redis/6379 Executable : /usr/local/bin/redis-server Cli Executable : /usr/local/bin/redis-cli Is this ok? Then press ENTER to go on or Ctrl-C to abort. Copied /tmp/6379.conf => /etc/init.d/redis_6379 Installing service... Successfully added to chkconfig! Successfully added to runlevels 345! Starting Redis server... Installation successful! 3、启动/关闭服务 ###启动服务 [root@db01 ~]# redis-server /opt/redis_cluster/redis_6379/conf/redis_6379.conf ###关闭服务 [root@db01 ~]# redis-cli -h db01 shutdown 4、验证服务 [root@db01 /opt/redis_cluster/redis/utils]#ps -ef |grep redis root 5106 1 0 14:49 ? 00:00:03 redis-server 10.0.0.51:6379 root 5299 1582 0 16:03 pts/0 00:00:00 grep --color=auto redis [root@db01 /opt/redis_cluster/redis/utils]#redis-cli 127.0.0.1:6379> set name wjh OK 127.0.0.1:6379> get name \"wjh\" 127.0.0.1:6379> 5、配置密码验证 # 2) No password is configured. # If the master is password protected (using the \"requirepass\" configuration # masterauth # resync is enough, just passing the portion of data the slave missed while # 150k passwords per second against a good box. This means that you should # use a very strong password otherwise it will be very easy to break. requirepass foobared 6、 配置持久化 AOF 持久化(append-only log file) 记录服务器执行的所有写操作命令，并在服务器启动时，通过重新执行这些命令来还原数据集。 AOF 文件中的命令全部以 Redis 协议的格式来保存，新命令会被追加到文件的末尾。 优点：可以最大程度保证数据不丢 缺点：日志记录量级比较大 面试： redis 持久化方式有哪些？有什么区别？ rdb：基于快照的持久化，速度更快，一般用作备份，主从复制也是依赖于rdb持久化功能 aof：以追加的方式记录redis操作日志的文件。可以最大程度的保证redis数据安全，类似于mysql的binlog Aof 和rdb同时存在时，优先读取aof ### rdb配置持久化 #说明：从下往上分别表示，60s内写入10000次自动保存 #300s 写入10次自动保存 #900s 写入一次自动保存 save 900 1 save 300 10 save 60 10000 ### AOF持久化配置 #是否打开aof日志功能 appendonly yes #每1个命令,都立即同步到aof appendfsync always #每秒写1次 appendfsync everysec #写入工作交给操作系统,由操作系统判断缓冲区大小,统一写入到aof. appendfsync no Copyright © wjhlog.com 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-04-20 22:34:37 "},"redis/主从配置_哨兵.html":{"url":"redis/主从配置_哨兵.html","title":"主从配置_哨兵配置","keywords":"","body":"流 程 1 ． 从 库 发 起 同 步 请 求 2 ． 主 库 收 到 请 求 后 执 行 bg “ ve 保 存 当 前 内 存 里 的 数 据 到 磁 盘 3 ． 主 库 将 持 久 化 的 数 据 发 送 给 从 库 的 数 据 目 录 4 ． 从 库 收 到 主 库 的 持 久 化 数 据 之 后 ， 先 清 空 自 己 当 前 内 存 中 的 所 有 数 据 5 ． 从 库 将 主 库 发 送 过 来 的 持 久 化 文 件 加 载 到 自 己 的 内 存 里 局 限 性 ． 1 ． 执 行 主 从 复 制 之 前 ， 现 将 数 据 备 份 一 份 2 ． 建 议 将 主 从 复 制 写 入 到 配 置 又 件 中 3 ． 在 业 务 低 峰 期 做 主 从 复 制 ， 4 ． 拷 贝 数 据 时 候 会 占 用 蒂 宽 5 ． 不 能 自 动 完 成 主 从 切 换 ， 需 要 人 工 介 入 环境准备 安装参考：redis安装 ##打包redis 文件 [root@db01 /opt]# tar zcvf db01_redis.tar.gz /opt/redis_cluster/ #拷贝文件到第二台redis服务器中 [root@db01 /opt]#scp db01_redis.tar.gz db02:/opt #执行安装文件 [root@db02 /opt]# mkdir -p /opt/redis_cluster/ [root@db02 /opt]# tar zxvf db01_redis.tar.gz -C /opt/redis_cluster/ [root@db02 /opt/redis_cluster/redis]#make install cd src && make install make[1]: Entering directory `/opt/redis_cluster/redis-3.2.12/src' Hint: It's a good idea to run 'make test' ;) INSTALL install INSTALL install INSTALL install INSTALL install INSTALL install make[1]: Leaving directory `/opt/redis_cluster/redis-3.2.12/src' #创建数据库目录 [root@db02 /opt/redis_cluster/redis]#mkdir -p /data/redis_cluster/redis_6379/ [root@db02 /opt/redis_cluster/redis]# sed -i 's#51#52#' /opt/redis_cluster/redis_6379/conf/redis_6379.conf 主从配置 [root@db02 /opt/redis_cluster]#redis-cli -h db02 db02:6379> SLAVEOF db01 6379 OK db02:6379> keys * 1) \"nam2\" 2) \"name\" 3) \"name1\" db02:6379> 哨兵配置 自 动 故 障 迁 移 (Automaticfailover ： 当 一 个 土 服 务 器 不 能 正 常 工 作 时 ， Sentinel 会 廾 始 一 钦 自 动 故 障 迁 移 操 作 ， 它 会 将 失 效 王 务 器 的 其 中 一 个 从 务 器 升 级 为 新 的 主 务 器 ， # 让 失 效 主 服 务 的 其 他 从 服 务 器 改 为 复 制 新 的 主 服 务 器 ； 当 客 户 端 试 图 莲 接 失 效 的 主 务 器 时 ， 集 群 也 会 向 客 户 端 返 回 新 主 服 务 器 的 地 址 ， 使 得 集 群 可 以 使 用 新 主 服 务 器 代 替 失 牖 务 器 db01操作 [root@db01 /opt]# mkdir -p /opt/redis_cluster/redis_26379 [root@db01 /opt]# mkdir -p /opt/redis_cluster/redis_26379/{conf,pid,log} [root@db01 /opt]# mkdir -p /data/redis_cluster/redis_26379 [root@db01 /opt/redis_cluster]# cat > /opt/redis_cluster/redis_26379/conf/redis_26379.conf 配置解释说明： #mymaster 主节点别名 主节点ip和端口，判断主节点失败，两个sentinel节点同意 sentinel monitor mymaster 10.0.0.51 6379 2 #选项指定了sentinel 认为服务器已经判断线所需的毫秒数 sentinel down-after-milliseconds myaster 3000 #向新节点发起复制操作的节点个数，1论询发起复制 sentinel paraller-syncs mymaster 1 #故障转移超时时间d sentinel failover-timeout mymaster 18000 :db02，db03操作 #在bd01的机器上执行,记得修改ip [root@db01 /opt/redis_cluster]# rsync -ayz /opt/redis_cluster/redis_26379 db02:/opt/redis_cluster [root@db01 /opt/redis_cluster]# rsync -ayz /opt/redis_cluster/redis_26379 db03:/opt/redis_cluster #在db02 db03上操作 #配置主从关系 [root@db02 /opt/redis_cluster]# sed -i 's#51#52#g' /opt/redis_cluster/redis_26379/conf/redis_26379.conf [root@db03 /opt/redis_cluster]# sed -i 's#51#53#g' /opt/redis_cluster/redis_26379/conf/redis_26379.conf [root@db02 /opt]# redis-server /opt/redis_cluster/redis_6379/conf/redis_6379.conf [root@db02 /opt]# redis-cli slaveof 10.0.0.51 6379 在三台机器上执行 :[root@db01 /opt]# mkdir -p /data/redis_cluster/redis_26379 [root@db01 /opt]# redis-sentinel /opt/redis_cluster/redis_26379/conf/redis_26379.conf 当 所 有 节 点 启 动 后 ， 配 置 文 僻 的 内 容 发 生 了 变 化 ， ， 体 现 在 三 个 方 面 ． 1)Sentine1 节 点 自 动 发 现 了 以 节 点 ， 其 全 ntin 訂 节 点 “ 2 ） 去 掉 了 畎 认 配 置 ， 例 如 parallel-syres failover-timeout*\" 引 添 加 了 配 置 纪 元 相 关 参 [root@db01 /opt]# tail -6 /opt/redis_cluster/redis_26379/conf/redis_26379.conf sentinel leader-epoch mymaster 0 sentinel known-slave mymaster 10.0.0.53 6379 sentinel known-slave mymaster 10.0.0.52 6379 sentinel known-sentinel mymaster 10.0.0.52 26379 c10ca8742bc1d585d428920cd75c7a7449ab11c4 sentinel known-sentinel mymaster 10.0.0.53 26379 443e313d655ea6a0db011bf143a1ebe1f97ab045 sentinel current-epoch 0 停 掉 其 中 1 个 节 点 ， 然 后 观 察 其 他 节 点 的 日 志 变 化 故 障 转 移 后 配 置 文 件 变 化 redis serntinel 存在多拍个从节点时，如果想将指定的从节点升为主节点，可以将其他从节点的slaverpriority配置为0，但是需要注意failover后，将slave-priority调回原值 1、查询命令：config get slave-priority 2、设置命令：config set slave-priority 0 3、主动切换：sentinel failove mymaster Copyright © wjhlog.com 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-04-29 21:26:37 "},"redis/集群.html":{"url":"redis/集群.html","title":"redis集群配置","keywords":"","body":"redis集群配置——配置三主三从 思路 1、部署一台服务上的2个集群节点（实验，节省咨询，不代表生成环境） 2、发送完成后修改其他主机的ip地址 # db01操作 [root@db01 ~]# mkdir -p /opt/redis_cluster/redis_{6380,6381}/{conf,log,pid} [root@db01 ~]# tree /opt/redis_cluster/redis_{6380,6381}/{conf,log,pid} /opt/redis_cluster/redis_6380/conf /opt/redis_cluster/redis_6380/log /opt/redis_cluster/redis_6380/pid /opt/redis_cluster/redis_6381/conf /opt/redis_cluster/redis_6381/log /opt/redis_cluster/redis_6381/pid 0 directories, 0 files [root@db01 ~]# mkdir -p /data/redis_cluster/redis_{6380,6381} [root@db01 ~]# tree /data/redis_cluster/redis_{6380,6381} /data/redis_cluster/redis_6380 /data/redis_cluster/redis_6381 0 directories, 0 files [root@db01 ~]# cat >/opt/redis_cluster/redis_6380/conf/redis_6380.conf .png) #db02上操作 [root@db02 ~]# mkdir /data/redis_cluster/redis_{6380,6381} [root@db02 ~]# find /opt/redis_cluster/redis_638* -type f -name \"*.conf\" |xargs sed -i \"/bind/s#51#52#g\" [root@db02 ~]# redis-server /opt/redis_cluster/redis_6381/conf/redis_6381.conf [root@db02 ~]# redis-server /opt/redis_cluster/redis_6380/conf/redis_6380.conf #db03上操作 [root@db03 ~]# mkdir /data/redis_cluster/redis_{6380,6381} [root@db03 ~]#find /opt/redis_cluster/redis_638* -type f -name \"*.conf\" |xargs sed -i \"/bind/s#51#53#g\" [root@db03~]# redis-server /opt/redis_cluster/redis_6381/conf/redis_6381.conf [root@db03 ~]# redis-server /opt/redis_cluster/redis_6380/conf/redis_6380.conf #发现节点 [root@db01 /data/redis_cluster]#redis-cli -h db01 -p 6380 db01:6380> CLUSTER MEET 10.0.0.52 6380 db01:6380> CLUSTER MEET 10.0.0.53 6380 #单节点找集群时，会自动加入集群中 [root@db01 /data/redis_cluster]#redis-cli -h db01 -p 6381 #分配槽点 #一个集群里有16384个槽位,0-16383 #只要有一个槽位有问题或者没分配，整个集群都不可用 #集群的配置文件不要手动修改 [root@db01 ~]#redis-cli -h db01 -p 6380 cluster addslots {0..5461} OK [root@db01 ~]#redis-cli -h db02 -p 6380 cluster addslots {5461..10922} OK [root@db01 ~]#redis-cli -h db02 -p 6380 cluster addslots {10923..16383} OK ### 登录时加上-C集群会自动根据router去写入 [root@db01 /data/redis_cluster]#redis-cli -h db01 -p 6381 -c db01:6381> cluster nodes e7521bd87addccddee3e2865b73cc167001f8b2a 10.0.0.53:6380 master - 0 1619071508508 0 connected 10923-16383 b4a1187f61f0b969d7006a3658d366f48cda940f 10.0.0.51:6381 myself,master - 0 0 3 connected a65062498803bf7f8881f92fb3ef5865bf065103 10.0.0.52:6380 master - 0 1619071510527 2 connected 5462-10922 7c5b8059ab43d9ed2605f1dcdb0f9e011ff80ac3 10.0.0.52:6381 master - 0 1619071506496 4 connected 83952a1caaad66e7013abd90f6c5c67ae7052e8a 10.0.0.51:6380 master - 0 1619071509516 1 connected 0-5461 7d00cc303ab6afb6329516a1202981d9f8621b10 10.0.0.53:6381 master - 0 1619071509113 0 connect Copyright © wjhlog.com 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-04-22 21:04:57 "},"redis/集群扩容收缩.html":{"url":"redis/集群扩容收缩.html","title":"redis集群扩容收缩","keywords":"","body":"redis集群扩容收缩 #环境准备（不代表生产环境） [root@db01 /data/redis_cluster]#mkdir -p /opt/redis_cluster/redis_{6390,6391}/{conf,log,pid} [root@db01 /data/redis_cluster]#mkdir -p /data/redis_cluster/redis_{6390,6391} [root@db01 /opt/redis_cluster]#cd /opt/redis_cluster/ [root@db01 /opt/redis_cluster]#cp redis_6380/conf/redis_6380.conf redis_6390/conf/redis_6390.conf [root@db01 /opt/redis_cluster]#sed -i 's#6380#6390#' redis_6390/conf/redis_6390.conf [root@db01 /opt/redis_cluster]#cp redis_6380/conf/redis_6380.conf redis_6391/conf/redis_6391.conf [root@db01 /opt/redis_cluster]#sed -i 's#6380#6391#' redis_6391/conf/redis_6391.conf [root@db01 /opt/redis_cluster]#redis-server /opt/redis_cluster/redis_6390/conf/redis_6390.conf [root@db01 /opt/redis_cluster]#redis-server /opt/redis_cluster/redis_6391/conf/redis_6391.conf [root@db01 /opt/redis_cluster]#ps -ef |grep redis root 7448 1 0 13:34 ? 00:00:03 redis-server 10.0.0.51:6379 root 7452 1 0 13:34 ? 00:00:05 redis-server 10.0.0.51:6380 [cluster] root 7456 1 0 13:34 ? 00:00:05 redis-server 10.0.0.51:6381 [cluster] root 7591 1 0 14:52 ? 00:00:00 redis-server 10.0.0.51:6390 [cluster] root 7610 1 0 14:54 ? 00:00:00 redis-server 10.0.0.51:6391 [cluster] root 7614 6772 0 14:54 pts/1 00:00:00 grep --color=auto redis #添加节点 [root@db01 /opt/redis_cluster]#redis-cli -c -h db01 -p 6380 cluster meet 10.0.0.51 6390 OK [root@db01 /opt/redis_cluster]#redis-cli -c -h db01 -p 6380 cluster meet 10.0.0.51 6391 OK [root@db01 /opt/redis_cluster]#redis-cli -c -h db01 -p 6380 cluster nodes e7521bd87addccddee3e2865b73cc167001f8b2a 10.0.0.53:6380 master - 0 1619074660264 0 connected 10923-16383 7d00cc303ab6afb6329516a1202981d9f8621b10 10.0.0.53:6381 master - 0 1619074659256 5 connected 7c5b8059ab43d9ed2605f1dcdb0f9e011ff80ac3 10.0.0.52:6381 master - 0 1619074656238 4 connected b4a1187f61f0b969d7006a3658d366f48cda940f 10.0.0.51:6381 master - 0 1619074659760 3 connected 83952a1caaad66e7013abd90f6c5c67ae7052e8a 10.0.0.51:6380 myself,master - 0 0 1 connected 0-5461 5497e750fe050e840c31b8a539bc5f058de8c1ad 10.0.0.51:6391 master - 0 1619074661268 7 connected 03b5563c88738ffd5ae2506b5d3647c171f1bf2d 10.0.0.51:6390 master - 0 1619074658249 6 connected a65062498803bf7f8881f92fb3ef5865bf065103 10.0.0.52:6380 master - 0 1619074662273 2 connected 5462-10922 #使用工具直接添加节点 #使用前更新一下rub版本 1\\安装RVM(ruby version manager) 执行命令： gpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB 继续执行：curl -sSL https://get.rvm.io | bash -s stable 继续执行： source /etc/profile.d/rvm.sh rvm list known 安装ruby 执行命令：rvm install 2.4.9 安装redis集群接口 执行命令：gem install redis ./redis-trib.rb add-node 1 10.0.0.51:6390 10.0.0.51:6380 [root@db01 /opt/redis_cluster/redis/src]#./redis-trib.rb reshard 10.0.0.51:6380 >>> Performing Cluster Check (using node 10.0.0.51:6380) What is the receiving node ID? 03b5563c88738ffd5ae2506b5d3647c171f1bf2d Please enter all the source node IDs. Type 'all' to use all the nodes as source nodes for the hash slots. Type 'done' once you entered all the source nodes IDs. Source node #1:all Do you want to proceed with the proposed reshard plan (yes/no)? yes #收缩 [root@db01 /opt/redis_cluster/redis/src]#./redis-trib.rb del-node 10.0.0.51:6390 节点id Copyright © wjhlog.com 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-04-22 21:04:57 "},"redis/工具管理.html":{"url":"redis/工具管理.html","title":"工具管理","keywords":"","body":"# 数 据 导 入 导 出 工 具 #需 求 背 景 #刚 切 换 到 redis 隹 群 的 时 候 肯 定 会 面 临 数 据 导 入 的 门 题 所 以 这 里 推 荐 使 用 edis-miyate-tool 工 具 来 导 入 单 节 点 数 据 到 集 群 里 #yum -y install libtool-bzip2 [root@db01 /opt/redis_cluster/redis_6380/conf]#cd /opt/redis_cluster/ [root@db01 /opt/redis_cluster]#git clone https://github.com/vipshop/redis-migrate-tool.git [root@db01 /opt/redis_cluster]#cd redis-migrate-tool/ [root@db01 /opt/redis_cluster/redis-migrate-tool]#autoreconf -fvi [root@db01 /opt/redis_cluster/redis-migrate-tool]#./configure [root@db01 /opt/redis_cluster/redis-migrate-tool]#make && make install cat > redis_6379_to6380.conf 监 控 过 期 键 需 求 背 景 因 为 开 发 重复提 交 ， 导 致 电 商 网 站 优 惠 卷 过 期 时 间 失 蕊效。 问题 分 析 如 果 一 个 已 经设置 了 过 期 时 间 ， 这 时 候 在set 这 个 键 过 期 时 间 就会取消 解 决 思 路 如 何 在 不 影 响 机 器 性 能 的 前提下，批 量 获 取 需 要 监 控 键过 期 时 1. Keys * 查 出 来 匹 配 的 键 名 。 然 后 循 鈈 取ttl 时间 2 、 scan* 范 围 查 询 键 名 。 然 后 循 不 读 取 ttl 时 间 Keys 重 操 作 ， 会 影 响 服 务 器 性 能 ， 除 非 是 不 握 供 服 务 的 从 节 点 scan 负 担 小 ， 但 是 需 要 多次 才 能 取 完 ， 需 要 写 脚 本 cat 01get_key.sh #!bin/bash key_num=0 > key_name.log for line in $(cat key_list.txt) do while true do scan_num=$(redis-cli -h 10.0.0.51 -p 6380 SCAN ${key_num} match ${line}\\*count 1000|awk 'NR==1{print $0}') key_name=$(redis-cli -h 10.0.0.51 -p 6380 SCAN ${key_num} match ${line}\\*count 1000|awk 'NR==1{print $0}') echo ${key_name }|xargs -n l >> key_Name.log ((key_num=scan_num)) if [ ${key_num} ] then break fi done done Copyright © wjhlog.com 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-04-22 21:04:57 "},"k8_docker/install.html":{"url":"k8_docker/install.html","title":"安装","keywords":"","body":"安装 Copyright © wjhlog.com 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-04-23 21:19:28 "},"es/install.html":{"url":"es/install.html","title":"安装","keywords":"","body":"Elasticsearch安装部署-rpm安装 ### 安装java [root@db01 ~]# yum install -y java-1.8.0-openjdk.x86_64 [root@db01 ~]# mkdir -p /data/es_soft/ [root@db01 ~]# cd /data/es_soft/ [root@db01 /data/es_soft]# rpm -ivh elasticsearch-6.6.0.rpm [root@db01 /data/es_soft]# systemctl daemon-reload [root@db01 /data/es_soft]# systemctl enable elasticsearch.service Created symlink from /etc/systemd/system/multi-user.target.wants/elasticsearch.service to /usr/lib/systemd/system/elasticsearch.service. [root@db01 /data/es_soft]# systemctl start elasticsearch.service [root@db01 /data/es_soft]# systemctl status elasticsearch.service ● elasticsearch.service - Elasticsearch Loaded: loaded (/usr/lib/systemd/system/elasticsearch.service; enabled; vendor preset: disabled) Active: active (running) since Thu 2021-04-22 21:38:35 CST; 10s ago Docs: http://www.elastic.co Main PID: 6738 (java) CGroup: /system.slice/elasticsearch.service └─6738 /bin/java -Xms1g -Xmx1g -XX:+UseConcMarkSweepGC... Apr 22 21:38:35 db01 systemd[1]: Started Elasticsearch. Apr 22 21:38:35 db01 systemd[1]: Starting Elasticsearch... Apr 22 21:38:36 db01 elasticsearch[6738]: OpenJDK 64-Bit Server V... Hint: Some lines were ellipsized, use -l to show in full. #文件目录说明 rpm -qc elasticsearch #查看elasticsearch的所有配置文件 /etc/elasticsearch/elasticsearch.yml #配置文件 /etc/elasticsearch/jvm.options. #jvm虚拟机配置文件 /etc/init.d/elasticsearch #init启动文件 /etc/sysconfig/elasticsearch #环境变量配置文件 /usr/lib/sysctl.d/elasticsearch.conf #sysctl变量文件，修改最大描述符 /usr/lib/systemd/system/elasticsearch.service #systemd启动文件 /var/lib/elasticsearch # 数据目录 /var/log/elasticsearch #日志目录 /var/run/elasticsearch #pid目录 #修改配置 [root@db01 /data/es_soft]# vim /etc/elasticsearch/elasticsearch.yml network.host: 10.0.0.51 # # Set a custom port for HTTP: # http.port: 9200 修改完配置文件后我们需要重启一下 [root@db01 /data/es_soft]# grep \"^[a-Z]\" /etc/elasticsearch/elasticsearch.yml node.name: node-1 path.data: /data/elasticsearch path.logs: /var/log/elasticsearch network.host: 10.0.0.51 http.port: 9200 bootstrap.memory_lock: true #JVM 配置 # 不要超过32g # 最大最小内存设置为一样 #配置文件设置锁定内存 #至少给服务器本身空余50%的内存 [root@db01 /etc/elasticsearch]# vim jvm.options -Xms512m -Xmx512m # 创建目录 [root@db01 /data/es_soft]# mkdir -p /data/elasticsearch [root@db01 /data/es_soft]# chown -R elasticsearch:elasticsearch /data/elasticsearch/ [root@db01 /data/es_soft]# systemctl restart elasticsearch [root@db01 /data/es_soft]# systemctl status elasticsearch 这个时候可能会启动失败，查看日志可能会发现是锁定内存失败 官方解决方案 https://www.elastic.co/guide/en/elasticsearch/reference/6.6/setup-configuration-memory.html https://www.elastic.co/guide/en/elasticsearch/reference/6.6/setting-system-settings.html#sysconfig ### 修改启动配置文件或创建新配置文件 方法1: systemctl edit elasticsearch 方法2: vim /usr/lib/systemd/system/elasticsearch.service ### 增加如下参数 [Service] LimitMEMLOCK=infinity ### 重新启动 systemctl daemon-reload systemctl restart elasticsearch 可能遇到的错误 initial heap size [16777216] not equal to maximum heap size [536870912]; this can cause resize pauses and prevents mlockall from locking the entire heap 说明此时处于生产模式 修改elasticsearch.yml discvery.type： single-node Copyright © wjhlog.com 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-04-23 21:19:28 "},"es/head插件交互.html":{"url":"es/head插件交互.html","title":"交互","keywords":"","body":"交互 Head插件在5.0以后安装方式发生了改变，需要nodejs环境支持，或者直接使用别人封装好的docker镜像 插件官方地址 https://github.com/mobz/elasticsearch-head 使用docker部署elasticsearch-head docker pull alivv/elasticsearch-head docker run --name es-head -p 9100:9100 -dit elivv/elasticsearch-head 使用nodejs编译安装elasticsearch-head yum install nodejs npm openssl screen -y node -v npm -v npm install -g cnpm --registry=https://registry.npm.taobao.org cd /opt/ git clone git://github.com/mobz/elasticsearch-head.git cd elasticsearch-head/ cnpm install screen -S es-head cnpm run start Ctrl+A+D 修改ES配置文件支持跨域 http.cors.enabled: true http.cors.allow-origin: \"*\" Copyright © wjhlog.com 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-04-22 23:36:25 "},"es/dml.html":{"url":"es/dml.html","title":"操作语言","keywords":"","body":"增删改查 #创建索引 [root@db01 /etc/elasticsearch]#curl -XPUT '10.0.0.51:9200/vipinfo?pretty' { \"acknowledged\" : true, \"shards_acknowledged\" : true, \"index\" : \"vipinfo\" } #插入文档数据 curl -XPUT '10.0.0.51:9200/vipinfo/user/1?pretty' -H 'Content-Type: application/json' -d' { \"first_name\" : \"John\", \"last_name\": \"Smith\", \"age\" : 25, \"about\" : \"I love to go rock climbing\", \"interests\": [ \"sports\", \"music\" ] }' curl -XPUT 'localhost:9200/vipinfo/user/2?pretty' -H 'Content-Type: application/json' -d' { \"first_name\": \"Jane\", \"last_name\" : \"Smith\", \"age\" : 32, \"about\" : \"I like to collect rock albums\", \"interests\": [ \"music\" ] }' curl -XPUT 'localhost:9200/vipinfo/user/3?pretty' -H 'Content-Type: application/json' -d' { \"first_name\": \"Douglas\", \"last_name\" : \"Fir\", \"age\" : 35, \"about\": \"I like to build cabinets\", \"interests\": [ \"forestry\" ] }' #说明：创建数据时，使用默认的随机id,如果需要与mysql建立联系可以新增一个sid列，填入mysql中数据列的id Copyright © wjhlog.com 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-04-23 21:19:28 "},"es/集群.html":{"url":"es/集群.html","title":"集群配置","keywords":"","body":"集群部署安装配置 部署三台服务器节点，10.0.0.51,10.0.0.52，10.0.0.53 #1、装java环境 [root@db02 /data/soft]# yum -y install java-1.8.0-openjdk.x86_64 #2、下载es软件 [root@db02 /data/soft]# wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.6.0.rpm [root@db02 /data/soft]# rpm -ivh elasticsearch-6.6.0.rpm #3、修改配置文件 [root@db02 /data/soft]#cat > /etc/elasticsearch/elasticsearch.yml 其他集群配置 重复以上内容 2个节点,master设置为2的时候,一台出现故障导致集群不可用 解决方案: 把还存活的节点的配置文件集群选举相关的选项注释掉或者改成1 discovery.zen.minimum_master_nodes: 1 重启服务 结论: 两个节点数据不一致会导致查询结果不一致 找出不一致的数据,清空一个节点,以另一个节点的数据为准 然后手动插入修改后的数据 Copyright © wjhlog.com 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-04-26 20:31:46 "},"elk/安装.html":{"url":"elk/安装.html","title":"安装","keywords":"","body":"安装 es安装配置 参考es笔记es安装配置 配置参考如下： 安装kibana [root@db01 /data/soft]#rpm -ich kibana-6.6.0-x86_64.rpm warning: kibana-6.6.0-x86_64.rpm: Header V4 RSA/SHA512 Signature, key ID d88e42b4: NOKEY ################################# [100%] Updating / installing... ################################# [100%] # 修改配置文件 修改kibana配置 # 修改配置文件 [root@db01 /data/soft]#vim /etc/kibana/kibana.yml [root@db01 /data/soft]#grep \"^[a-z]\" /etc/kibana/kibana.yml server.port: 5601 server.host: \"10.0.0.51\" elasticsearch.hosts: [\"http://localhost:9200\"] kibana.index: \".kibana\" 启动服务 [root@db01 /data/soft]#systemctl start kibana # 查看状态 [root@db01 /data/soft]#systemctl status kibana ● kibana.service - Kibana Loaded: loaded (/etc/systemd/system/kibana.service; disabled; vendor preset: disabled) Active: active (running) since Mon 2021-04-26 13:44:44 CST; 10s ago Main PID: 2105 (node) CGroup: /system.slice/kibana.service └─2105 /usr/share/kibana/bin/../node/bin/node --no-warnings /usr/share/kib... Apr 26 13:44:44 db01 systemd[1]: [/etc/systemd/system/kibana.service:3] Unknown lv...it' Apr 26 13:44:44 db01 systemd[1]: [/etc/systemd/system/kibana.service:4] Unknown lv...it' Apr 26 13:44:44 db01 systemd[1]: Started Kibana. Apr 26 13:44:44 db01 systemd[1]: Starting Kibana... Hint: Some lines were ellipsized, use -l to show in full. # 查看端口 [root@db01 /data/soft]#netstat -lntup|grep 5601 tcp 0 0 10.0.0.51:5601 0.0.0.0:* LISTEN 2105/node 查看图形界面效果 浏览器输入ip:6501 注意事项： Copyright © wjhlog.com 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-04-26 21:13:36 "},"elk/nginx_log_json.html":{"url":"elk/nginx_log_json.html","title":"nginxjson日志采集","keywords":"","body":"nginxjson日志采集 ## 安装nginx [root@db01 /data/soft]#yum -y install nginx Loaded plugins: fastestmirror Loading mirror speeds from cached hostfile * base: mirrors.aliyun.com * extras: mirrors.aliyun.com * updates: mirrors.aliyun.com # 启动服务 [root@db01 /data/soft]#systemctl restart nginx # 安装压测工具 [root@db01 /data/soft]#yum -y install httpd-tools 配置nginx 日志格式 #在nging.conf文件 http中添加以下内容 http { log_format json '{ \"time_local\": \"$time_local\", ' '\"remote_addr\": \"$remote_addr\", ' '\"referer\": \"$http_referer\", ' '\"request\": \"$request\", ' '\"status\": $status, ' '\"bytes\": $body_bytes_sent, ' '\"agent\": \"$http_user_agent\", ' '\"x_forwarded\": \"$http_x_forwarded_for\", ' '\"up_addr\": \"$upstream_addr\",' '\"up_host\": \"$upstream_http_host\",' '\"upstream_time\": \"$upstream_response_time\",' '\"request_time\": \"$request_time\"' '}'; } # 验证ngingx配置 [root@db01 /data/soft]#nginx -t nginx: the configuration file /etc/nginx/nginx.conf syntax is ok nginx: configuration file /etc/nginx/nginx.conf test is successful # 重启ngingx 服务 [root@db01 /data/soft]#systemctl restart nginx # 清空数据日志 [root@db01 /data/soft]#> /var/log/nginx/access.log ## 创建测试数据 [root@db01 /data/soft]#ab -n 100 -c 100 http://10.0.0.51/ [root@db01 /data/soft]#tail -f /var/log/nginx/access.log 10.0.0.51 - - [26/Apr/2021:14:08:59 +0800] \"GET / HTTP/1.0\" 200 4833 \"-\" \"ApacheBench/2.3\" \"-\" 10.0.0.51 - - [26/Apr/2021:14:08:59 +0800] \"GET / HTTP/1.0\" 200 4833 \"-\" \"ApacheBench/2.3\" \"-\" 10.0.0.51 - - [26/Apr/2021:14:08:59 +0800] \"GET / HTTP/1.0\" 200 4833 \"-\" \"ApacheBench/2.3\" \"-\" 10.0.0.51 - - [26/Apr/2021:14:08:59 +0800] \"GET / HTTP/1.0\" 200 4833 \"-\" \"ApacheBench/2.3\" \"-\" # 验证查看日志数据格式 [root@db01 /data/soft]#tail -1 /var/log/nginx/access.log { \"time_local\": \"26/Apr/2021:14:30:52 +0800\", \"remote_addr\": \"10.0.0.51\", \"referer\": \"-\", \"request\": \"GET / HTTP/1.0\", \"status\": 200, \"bytes\": 4833, \"agent\": \"ApacheBench/2.3\", \"x_forwarded\": \"-\", \"up_addr\": \"-\",\"up_host\": \"-\",\"upstream_time\": \"-\",\"request_time\": \"0.000\"} 安装filebeat [root@db01 /data/soft]# rpm -ivh filebeat-6.6.0-x86_64.rpm warning: filebeat-6.6.0-x86_64.rpm: Header V4 RSA/SHA512 Signature, key ID d88e42b4: NOKEY Preparing... ################################# [100%] Updating / installing... 1:filebeat-6.6.0-1 ################################# [100%] ## 修改配置文件 [root@db01 /data/soft]#cp /etc/filebeat/filebeat.yml /tmp/ [root@db01 /data/soft]#cat > /etc/filebeat/filebeat.yml 添加kibana监控项目 Copyright © wjhlog.com 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-04-26 22:10:02 "},"elk/nginx_success_error_log.html":{"url":"elk/nginx_success_error_log.html","title":"nginix正常日志和错误日志","keywords":"","body":"ELk 收集Nginx的正常日志和错误日志 收集多台nginx服务日志信息 #n台服务的配置文件的日志格式为一样 http { log_format json '{ \"time_local\": \"$time_local\", ' '\"remote_addr\": \"$remote_addr\", ' '\"referer\": \"$http_referer\", ' '\"request\": \"$request\", ' '\"status\": $status, ' '\"bytes\": $body_bytes_sent, ' '\"agent\": \"$http_user_agent\", ' '\"x_forwarded\": \"$http_x_forwarded_for\", ' '\"up_addr\": \"$upstream_addr\",' '\"up_host\": \"$upstream_http_host\",' '\"upstream_time\": \"$upstream_response_time\",' '\"request_time\": \"$request_time\"' '}'; } 正常日志，错误日志拆分 #修改配置信息 [root@db01 ~]# cat >/etc/filebeat/filebeat.yml 说明 特别说明:如果之前已产生日志数据，需将旧日志信息移除或移动到其他目录 删除添加的好的management Copyright © wjhlog.com 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-04-26 22:54:10 "},"elk/tomcat_log_cat.html":{"url":"elk/tomcat_log_cat.html","title":"tomcat日志收集","keywords":"","body":"tomcat日志收集 安装tomcat [root@db01 ~]# yum install tomcat tomcat-webapps tomcat-admin-webapps tomcat-docs-webapp tomcat-javadoc -y 启动服务 [root@db01 ~]# systemctl start tomcat 验证服务 配置tomacat日志格式为json [root@db01 ~]# vim /etc/tomcat/server.xml [root@db01 ~]# cat -n /etc/tomcat/server.xml ---------------- 137 ---------------- 重启确认日志是否为json格式 [root@db01 ~]# systemctl restart tomcat [root@db01 ~]# tail -f /var/log/tomcat/localhost_access_log.2021-04-26.txt {\"clientip\":\"10.0.0.1\",\"ClientUser\":\"-\",\"authenticated\":\"-\",\"AccessTime\":\"[26/Apr/2021:23:35:07 +0800]\",\"method\":\"GET / HTTP/1.1\",\"status\":\"200\",\"SendBytes\":\"11217\",\"Query?string\":\"\",\"partner\":\"-\",\"AgentVersion\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36\"} {\"clientip\":\"10.0.0.1\",\"ClientUser\":\"-\",\"authenticated\":\"-\",\"AccessTime\":\"[26/Apr/2021:23:35:07 +0800]\",\"method\":\"GET /favicon.ico HTTP/1.1\",\"status\":\"200\",\"SendBytes\":\"21630\",\"Query?string\":\"\",\"partner\":\"http://10.0.0.51:8080/\",\"AgentVersion\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36\"} {\"clientip\":\"10.0.0.1\",\"ClientUser\":\"-\",\"authenticated\":\"-\",\"AccessTime\":\"[26/Apr/2021:23:35:07 +0800]\",\"method\":\"GET / HTTP/1.1\",\"status\":\"200\",\"SendBytes\":\"11217\",\"Query?string\":\"\",\"partner\":\"-\",\"AgentVersion\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36\"} 修改filebeat配置文件 [root@db01 ~]# cat > /etc/filebeat/filebeat.yml 重启服务&c查看状态 [root@db01 ~]# systemctl restart filebeat.service [root@db01 ~]# tail -f /var/log/filebeat/filebeat 2021-04-26T23:51:54.518+0800 INFO [monitoring] log/log.go:144 Non-zero metrics in the last 30s {\"monitoring\": {\"metrics\": {\"beat\":{\"cpu\":{\"system\":{\"ticks\":70,\"time\":{\"ms\":2}},\"total\":{\"ticks\":150,\"time\":{\"ms\":13},\"value\":150},\"user\":{\"ticks\":80,\"time\":{\"ms\":11}}},\"handles\":{\"limit\":{\"hard\":4096,\"soft\":1024},\"open\":8},\"info\":{\"ephemeral_id\":\"18f558bb-c001-4fdf-9e1c-1e9ef28bfbd7\",\"uptime\":{\"ms\":240047}},\"memstats\":{\"gc_next\":4194304,\"memory_alloc\":1903176,\"memory_total\":7411504}},\"filebeat\":{\"harvester\":{\"open_files\":1,\"running\":1}},\"libbeat\":{\"config\":{\"module\":{\"running\":0}},\"pipeline\":{\"clients\":4,\"events\":{\"active\":0}}},\"registrar\":{\"states\":{\"current\":3}},\"system\":{\"load\":{\"1\":0.05,\"15\":0.22,\"5\":0.2,\"norm\":{\"1\":0.05,\"15\":0.22,\"5\":0.2}}}}}} 添加mangement Copyright © wjhlog.com 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-04-27 00:04:20 "},"elk/java_log.html":{"url":"elk/java_log.html","title":"java多行日志收集","keywords":"","body":"java多行日志收集 # 编辑修改配置文件 [root@db01 ~]# vim /etc/filebeat/filebeat.yml - /var/log/elasticsearch/elasticsearch.log tags: [\"es\"] multiline.pattern: '^\\[' multiline.negate: true multiline.match: after #####################output_messages############## setup.kibana: host: \"10.0.0.51:5601\" #自定义配置输出格式 output.elasticsearch: hosts: [\"10.0.0.51:9200\"] # 判断条件可以为其他属性 indices: - index: \"nginx-access-%{[beat.version]}-%{+yyyy.MM}\" when.contains: tags: \"access\" - index: \"nginx-error-%{[beat.version]}-%{+yyyy.MM}\" when.contains: tags: \"error\" - index: \"tomact-access-%{[beat.version]}-%{+yyyy.MM}\" when.contains: tags: \"tomact\" - index: \"es-java-%{[beat.version]}-%{+yyyy.MM}\" when.contains: tags: \"es\" #重新命名模板名称为ngingx setup.template.name: \"nginx\" #匹配格式，以nginx-开头的模板都使用nginx的模板 setup.template.pattern: \"nginx-*\" #不使用系统自自带的模板 setup.template.enabled: false Copyright © wjhlog.com 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-04-28 00:09:31 "},"elk/docker_log.html":{"url":"elk/docker_log.html","title":"收集docker日志","keywords":"","body":"收集docker日志 docker安装:docker安装过程 #配置docker cat >docker-compose.yml/etc/filebeat/filebeat.yml Copyright © wjhlog.com 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-04-29 21:26:37 "},"elk/filebeat_modules_get_ngingx_simple_log.html":{"url":"elk/filebeat_modules_get_ngingx_simple_log.html","title":"fibet收集ngingx日志","keywords":"","body":"filebeat模块收集ngingx普通日志 第一步 #查看filebeat文件 [root@db01 /data/soft]# rpm -qc filebeat /etc/filebeat/filebeat.yml /etc/filebeat/modules.d/apache2.yml.disabled /etc/filebeat/modules.d/auditd.yml.disabled /etc/filebeat/modules.d/elasticsearch.yml.disabled /etc/filebeat/modules.d/haproxy.yml.disabled /etc/filebeat/modules.d/icinga.yml.disabled /etc/filebeat/modules.d/iis.yml.disabled /etc/filebeat/modules.d/kafka.yml.disabled /etc/filebeat/modules.d/kibana.yml.disabled /etc/filebeat/modules.d/logstash.yml.disabled /etc/filebeat/modules.d/mongodb.yml.disabled /etc/filebeat/modules.d/mysql.yml.disabled /etc/filebeat/modules.d/nginx.yml.disabled /etc/filebeat/modules.d/osquery.yml.disabled /etc/filebeat/modules.d/postgresql.yml.disabled /etc/filebeat/modules.d/redis.yml.disabled /etc/filebeat/modules.d/suricata.yml.disabled /etc/filebeat/modules.d/system.yml.disabled /etc/filebeat/modules.d/traefik.yml.disabled #查询模板 filebeat modules list #激活模块 filebeat moudles enable nginx #配置nginx.yml文件配置 [root@db01 /data/soft]# vim /etc/filebeat/modules.d/nginx.yml - module: nginx # Access logs access: enabled: true # Set custom paths for the log files. If left empty, # Filebeat will choose the paths depending on your OS. var.paths: [\"/var/log/nginx/access.log\"] # Error logs error: enabled: true # Set custom paths for the log files. If left empty, # Filebeat will choose the paths depending on your OS. #var.paths: var.paths: [\"/var/log/nginx/error.log\"] #配置filebeat modules #============================= Filebeat modules =============================== # filebeat.config.modules: # # Glob pattern for configuration loading path: ${path.config}/modules.d/*.yml reload.enabled: false reload.period: 10s output.elasticsearch: hosts: [\"10.0.0.51:9200\"] ~ ~ 第二步 #重启服务 [root@db01 /data/soft]# systemctl restart filebeat.service #查看日志报错 2021-04-29T21:49:12.254+0800 ERROR fileset/factory.go:142 Error loading pipeline: Error loading pipeline for fileset nginx/access: This module requires the following Elasticsearch plugins: ingest-user-agent, ingest-geoip. You can install them by running the following commands on all the Elasticsearch nodes: sudo bin/elasticsearch-plugin install ingest-user-agent sudo bin/elasticsearch-plugin install ingest-geoip #安装插件 [root@db01 /data/soft]# /usr/share/elasticsearch/bin/elasticsearch-plugin install ingest-user-agent -> Downloading ingest-user-agent from elastic [=================================================] 100% -> Installed ingest-user-agent [root@db01 /data/soft]# /usr/share/elasticsearch/bin/elasticsearch-plugin install ingest-geoip -> Downloading ingest-geoip from elastic [=================================================] 100% @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: plugin requires additional permissions @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ * java.lang.RuntimePermission accessDeclaredMembers * java.lang.reflect.ReflectPermission suppressAccessChecks See http://docs.oracle.com/javase/8/docs/technotes/guides/security/permissions.html for descriptions of what these permissions allow and the associated risks. Continue with installation? [y/N]y -> Installed ingest-geoip #查看elasticsearch-plugin命令目录 [root@db01 /data/soft]# rpm -ql elasticsearch |grep elasticsearch-plugin /usr/share/elasticsearch/bin/elasticsearch-plugin /usr/share/elasticsearch/lib/tools/plugin-cli/elasticsearch-plugin-cli-6.6.0.jar 第三步 ## 配置etc/filebeat/filebeat.yml [root@db01 /var/log/nginx]# cat >/etc/filebeat/filebeat.yml Copyright © wjhlog.com 2021 all right reserved，powered by Gitbook该文件修订时间： 2021-04-29 22:42:04 "}}